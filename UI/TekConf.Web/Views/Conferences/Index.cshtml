@using System.Configuration
@using System.Web.Optimization
@using TekConf.Web.Controllers
@model List<TekConf.RemoteData.Dtos.v1.FullConferenceDto>
    <!--=== Breadcrumbs ===-->
    <div class="breadcrumbs margin-bottom-50">
        <div class="container">
            <h1 class="color-green pull-left">Conferences</h1>

        </div><!--/container-->
    </div><!--/breadcrumbs-->
    <!--=== End Breadcrumbs ===-->
    <!--=== Content Part ===-->

<!--=== Content Part ===-->
<div class="container">		
	<div class="row-fluid">
    	<div class="span3">
		    <div class="who margin-bottom-30">
									@using (Html.BeginForm("Index", "Conferences", FormMethod.Get))
									{
										var views = new List<SelectListItem>()
										{
											new SelectListItem() {Text = "Thumbnails", Value = "thumbnails", Selected = !ViewBag.ShowTable},
											new SelectListItem() {Text = "Table", Value = "table", Selected = ViewBag.ShowTable}
										};
										ConferencesFilter filter;
										if (ViewBag.Filter != null)
										{
											filter = ViewBag.Filter as ConferencesFilter ?? new ConferencesFilter();
										}
										else
										{
											filter = new ConferencesFilter();
										}
										var sorts = new List<SelectListItem>()
										{
											new SelectListItem() {Text = "Start Date", Value = "startDate"},
											new SelectListItem() {Text = "Name", Value = "name"},
											new SelectListItem() {Text = "Call for Speakers Opening", Value = "callForSpeakersOpeningDate"},
											new SelectListItem() {Text = "Call for Speakers Closing", Value = "callForSpeakersClosingDate"},
											new SelectListItem() {Text = "Tickets on Sale Date", Value = "registrationOpens"},
											new SelectListItem() {Text = "Date Added", Value = "dateAdded"}
										};
										var sortBy = sorts.FirstOrDefault(x => x.Value == filter.sortBy);
										if (sortBy != null)
										{
											sortBy.Selected = true;
										}
										var viewAs = views.FirstOrDefault(x => x.Value == filter.viewAs);
										if (viewAs != null)
										{
											viewAs.Selected = true;
										}

										<div class="headline"><h3>Search/Filter</h3></div>

		
											@Html.TextBox("search", filter.search, new { placeholder = "Search text", style="margin-bottom:20px;" })<br/>

											<label>Sort By</label>
											@Html.DropDownList("sortBy", sorts, new {@onchange = "this.form.submit();",  style="margin-bottom:5px;"})<br/>

											@Html.TextBox("city", filter.city, new { placeholder = "City", style="margin-bottom:5px;" })<br/>
											
											@Html.TextBox("state", filter.state, new { placeholder = "2 Letter State", style="margin-bottom:5px;" })<br/>
															
											@Html.TextBox("country", filter.country, new { placeholder = "Country", style="margin-bottom:5px;" })<br/>
																			     
											@Html.TextBox("distance", filter.distance, new { placeholder = "Distance (in miles). Default: 25", style="margin-bottom:5px;" })<br/>
           
												
											<label class="checkbox">
												@Html.CheckBox("showPastConferences", filter.showPastConferences, new { @onchange = "this.form.submit();" }) Show Past Conferences?
											</label>
											<label class="checkbox">
												@Html.CheckBox("showOnlyOpenCalls", filter.showOnlyOpenCalls, new { @onchange = "this.form.submit();" }) Show Only Open Calls?
											</label>
											<label class="checkbox">
												@Html.CheckBox("showOnlyOnSale", filter.showOnlyOnSale, new { @onchange = "this.form.submit();" }) Show Only On Sale?
											</label>


											<button type="submit" class="btn-u">Filter</button><button type="button" class="btn-u" style="margin-left:100px;" onclick="window.location='Conferences';">Clear</button>
				
									}
					</div>

        </div><!--/span3-->		

		<div class="span9">
			<div class="row-fluid gallery">
				@{
					var groups = Model.Count / 4;
					for (int groupCounter = 0; groupCounter <= groups; groupCounter++)
					{
						<ul class="thumbnails">

							@foreach (var conference in Model.Skip(groupCounter * 4).Take(4))
			 {
								<li class="span3">
									<a class="thumbnail fancybox-button zoomer" data-rel="fancybox-button" href="~/Conferences/@conference.slug">
										<div class="overlay-zoom">
											<img src="@conference.imageUrl" alt="" />
											<div class="zoom-icon"></div>
										</div>
										<div class="headline">
											<h4>@conference.name</h4>
											<br />@conference.DateRange
											<br />@conference.FormattedAddress
										</div>
									</a>
								</li>
			 }
						</ul><!--/thumbnails-->
					}
				}

			</div><!--/row-fluid-->




		</div><!--/span9-->


	</div><!--/row-fluid-->        


</div><!--/container-->
@section scripts {
	changeMenuActive('menuConferences');
}
<!--=== End Content Part ===-->